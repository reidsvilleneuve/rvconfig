# Env vars
IGNOREEOF=10   # Shell only exists after the 10th consecutive Ctrl-d
set -o ignoreeof  # In case above command doesn't work
ZSH_THEME=""
COMPLETION_WAITING_DOTS="true"
DISABLE_UNTRACKED_FILES_DIRTY="true"
plugins=(git vi-mode tmux docker sbt aws)
export KEYTIMEOUT=2
export EDITOR=vim
export VISUAL=vim
export RVDEV_PROJECT_ROOT="$HOME"
export RIPGREP_CONFIG_PATH="$HOME/rvconfig/ripgrep/ripgreprc"

# Aliases

alias npm-exec='PATH=$(npm bin):$PATH'
alias fix='reset; stty sane; tput rs1; clear; echo -e "\033c"'
alias gp-new='git push --set-upstream origin $(current_branch)'
alias gtp='cd $RVDEV_PROJECT_ROOT'
alias _hard-gl='git fetch && git reset --hard origin/$(current_branch)'
alias debug-jest='node --inspect-brk node_modules/.bin/jest --runInBand'
alias debug-jest-watch='nodemon --inspect-brk node_modules/.bin/jest --runInBand'
alias rvdev-source-root='source ~/.zshrc'
alias rvdev-source-local='source .rvdev/zshrc'
alias tsd='tmux new-session -d -s'
alias gs='git show'
alias gcane='git commit --amend --no-edit'
alias rvdev-remove-diff-orig="gst | grep '\.orig$' | xargs rm"
alias jspp="python -m'json.tool'" # JSON pretty print - pipe or redirect into
alias daws="docker run --rm -it amazon/aws-cli" # Quick docker-based AWS CLI
alias ct="ctags -R ."

# Utility functions

function rvdev-diff-remote () {
  first_url=$1
  second_url=$2
  vimdiff <(curl -# "$first_url") <(curl -# "$second_url")
}

function rvdev-diff-remote-json () {
  first_url=$1
  second_url=$2
  vimdiff <(curl -# "$first_url" | python -m json.tool) <(curl -# "$second_url" | python -m json.tool)
}

function rvdev-gco-name () {
  search_query="$1"

  if [ -z "$search_query" ]; then
    echo "Specify a substring of the fist line of any commit message."
    return 1
  fi

  matching_commits="$(git log --oneline --all | grep -F "$search_query")"
  number_of_results="$(echo "$matching_commits" | wc -l)"

  if [ "$number_of_results" -gt 1 ]; then
    echo "Multiple commits found:\n$matching_commits"
  elif [ -z "$matching_commits" ]; then
    echo "No commits with that message found."
  else
    commit_hash="$(echo "$matching_commits" | cut -d' ' -f1)"
    git checkout "$commit_hash"
  fi
}

function rvdev-view-formatted-json-file () {
  file_to_view="$1"
  python -m json.tool < "$file_to_view" | vim -Rc'set ft=json' -
}

function rvdev-view-formatted-json-remote () {
  url_to_get="$1"
  vim -Rc'set ft=json' <(curl -# "$url_to_get" | python -m json.tool)
}

function rvdev-diff-formatted-json () {
  first_file="$1"
  second_file="$2"
  vimdiff <(jspp < "$first_file") <(jspp < "$second_file")
}

# Misc

ulimit -n 2048
bindkey -v

autoload -U add-zsh-hook
load-project-locals() {
  # NVM autoload -- Slow. Enabled so that I don't forget to change versions.

  local node_version="$(nvm version)"
  local nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version="$(nvm version "$(cat "${nvmrc_path}")")"

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$node_version" ]; then
      nvm use
    fi
  # Commented out for workflow testing of non-reverting version:
  # elif [ "$node_version" != "$(nvm version default)" ]; then
  #   echo "Reverting to nvm default version..."
  #   nvm use default
  fi

  # Project zshrc

  local current_directory="$(pwd)"
  local local_zshrc_path="$current_directory/.rvdev/zshrc"
  if [ -f "$local_zshrc_path" ]; then
    export RVDEV_PROJECT_ROOT="$current_directory"
    echo "Project directory set to $RVDEV_PROJECT_ROOT"

    if [[ "${PROJECT_ZSHRC_WHITELIST[@]}" =~ "$current_directory" ]]; then
      source "$local_zshrc_path"
      echo "Project zshrc loaded."
    else
      echo "Warning: Non-whitelisted project zshrc found for this directory."
    fi
  fi
}
add-zsh-hook chpwd load-project-locals
load-project-locals
